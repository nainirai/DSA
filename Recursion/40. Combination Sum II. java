class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> resultList = new ArrayList<>();
        Arrays.sort(candidates);
                backTrack(resultList, new ArrayList<>(), candidates, target, 0);
                // backTrack(resultList, new ArrayList<>(), candidates, target);
                return resultList;
    }
    public static void backTrack(List<List<Integer>> resultList,List<Integer> tempList, int[] candidates, int target, int start ){

        if(target==0){
        resultList.add(new ArrayList<>(tempList));
        return;
        }

        for(int i=start;i<candidates.length;i++){
            if(i>start && candidates[i]==candidates[i-1]){
                continue;
            }
            if(candidates[i]>target){
                break;
            }
            tempList.add(candidates[i]);
            backTrack(resultList,tempList,candidates,target-candidates[i],i+1);
            tempList.remove(tempList.size()-1);
        }
}
}
