import java.util.Stack;

class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        k=k%n;
        Stack<Integer> st = new Stack<Integer>();
        for(int i=n-1;i>n-k-1;i--){
                st.push(nums[i]);
        }
        for(int i=n-k-1;i>=0;i--){
                nums[i+k]=nums[i];
        } 
        for(int j=0;j<k;j++){
            nums[j]=st.pop();
            }
      }
}

//USING REVERSAL 
import java.util.*;

class Solution {
    public void rotate(int[] nums, int k) {
        int n=nums.length;
        k=k%n;
        reverseArray(nums,0,n-1);
        reverseArray(nums,0,k-1);
        reverseArray(nums,k,n-1);    
    }
    public static void reverseArray(int nums[], int i, int j){
      
        while(i<j){
            int temp=nums[i];
            nums[i]=nums[j];
            nums[j]=temp;
            i++;
            j--;
        }
    }
}

//USING QUEUE
import java.util.Stack;

class Solution {
    public void rotate(int[] nums, int k) {
        
        Queue<Integer> que = new LinkedList<>();
        int n = nums.length;

        // Ensure k is within the valid range
        k = k % n;

        // put in the queue last k elements
        for (int i = n - k; i < n; i++) {
            que.add(nums[i]);
        }

        // put in the queue first n-k elements
        for (int i = 0; i < n - k; i++) {
            que.add(nums[i]);
        }

        // Dequeue elements from the queue and update the original array
        for (int j = 0; j < n; j++) {
            nums[j] = que.remove();
        }
      
    }
}

