class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        
        ArrayList<Integer> ans = new ArrayList<>();
        boolean visit[] = new boolean[V];   // create visited boolean array
        for(int i=0;i<V;i++){
            dfs(0, adj, visit, ans);
        }
        return ans;
    }
     public static void dfs(int node, ArrayList<ArrayList<Integer>> adj, boolean visit[], ArrayList<Integer> ans){

        if(!visit[node]){   // node is not visited yet
            visit[node]=true;
            ans.add(node);
            for(int i=0;i<adj.get(node).size();i++){ //for(Integer lt = adj.get(node))
                int curr = adj.get(node).get(i);
                if(visit[curr]==false){
                    dfs(curr,adj,visit,ans);
                }
            }
        }
        else{
            return;
        }
     } 
} 
